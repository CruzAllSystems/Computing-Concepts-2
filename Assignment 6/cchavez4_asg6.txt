//Cruz Chavez
//Assignment #6

//StackQueueFrame Class
package asg6;
import java.awt.FlowLayout;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.JFrame;

public class StackQueueFrame 
{
	// main program that runs the Stack and Queue Gui testing
	// uses the Model-View-Controller paradigm
	// the controller is StackQueueViewImpl 
	// the models are StackEngine and QueueEngine instances
	// the view is part of the controller in StackQueueViewImpl class
	
	public static final int FRAME_WIDTH=800;
	public static final int FRAME_HEIGHT=600;
	public static void main(String[]args)
	{
	StackEngine stackEngine = new StackEngineImpl(4);
	QueueEngine queueEngine = new QueueEngineImpl(4);
	StackQueueViewImpl controller = new StackQueueViewImpl(stackEngine,queueEngine);
	JFrame frame = new JFrame("Cruz's Stack and Queue Tool");
	frame.setLayout(new FlowLayout());
	frame.addWindowListener( new WindowAdapter() {
		public void windowClosing(WindowEvent windowEvent)
		{
			System.exit(0);
		}
	});
	frame.getContentPane().add(controller);
	frame.setSize(StackQueueFrame.FRAME_WIDTH,StackQueueFrame.FRAME_HEIGHT);
	frame.setVisible(true);
   }


}//end of the StackQueueFrame Class

//StackQueueViewImpl Class
package asg6;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Scanner;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

public class StackQueueViewImpl extends JPanel implements ActionListener 
{
	private static final long serialVersionUID = 1L;
	JButton stackSizeButton;//
	JButton pushButton;//
	JButton peekButton;
	JButton showStackButton;//
	JButton clearStackButton;
	JButton popButton;//
	JButton queueSizeButton;
	JButton addButton;//
	JButton removeButton;//
	JButton clearQueueButton;
	JButton frontButton;//
	JButton rearButton;
	JButton emptyButton;//
	JButton fullButton;//
	JButton showQueueButton;//
	JTextArea stackArea;
	JPanel stackButtonPanel ;
	JPanel queueButtonPanel;
	StackPanel stackPanel;
	QueuePanel queuePanel;
	StackEngine stackEngine;
	QueueEngine queueEngine;
	
	ChangeListener stackEngineListener;
	ChangeListener queueEngineListener;
	String areaText;
	// default constructor, receives the stack engine model it is displaying and controlling
	public StackQueueViewImpl(StackEngine aStackEngine, QueueEngine aQueueEngine)
	{
		super();
		this.setPreferredSize(new Dimension(StackQueueFrame.FRAME_WIDTH-20, StackQueueFrame.FRAME_HEIGHT - 100));
		this.setLayout(new BorderLayout());
		this.stackEngine = aStackEngine;
		this.queueEngine = aQueueEngine;
	    areaText = "Current Stack:\n" + this.stackEngine.toString();
		stackEngineListener = new ChangeListener()
		{ 
			public void stateChanged(ChangeEvent e){
				update();
			}

		};
		this.stackEngine.addChangeListener(stackEngineListener);
		queueEngineListener = new ChangeListener()
		{ 
			public void stateChanged(ChangeEvent e){
				update();
			}

		};
		this.queueEngine.addChangeListener(queueEngineListener);
		init();
	}
	// initializes the view - all the widgets and listeners, sets up the view
	private void init() 
	{
		this.pushButton = new JButton("Push");
		this.popButton = new JButton("Pop");
		this.showStackButton = new JButton("Show Stack Contents");
		this.addButton = new JButton("Add to Queue");
		this.removeButton = new JButton("Remove from Queue");
		this.showQueueButton = new JButton("Show Queue Contents");
		this.stackArea = new JTextArea("Stack is Empty\n\n\nQueue is Empty", 20, 40);
		stackArea.setBackground(Color.RED);
		//this.showQueueButton = new JButton("Show Queue Contents");
		this.emptyButton = new JButton("Check Empty(both)");
		this.fullButton = new JButton("Check Full(both)");
		this.stackSizeButton = new JButton("Stack Size");
		this.frontButton = new JButton("Front of Queue");
		this.clearStackButton = new JButton("Clear Stack");
		this.queueSizeButton = new JButton("Queue Size");
		this.clearQueueButton = new JButton("Clear Queue");
		this.rearButton = new JButton("Rear of Queue");
		this.peekButton = new JButton("Peek");
		
		
		this.stackPanel = new StackPanel(stackEngine);  // create a Stack Panel (view) and send it the engine it is "modeling"
		this.queuePanel = new QueuePanel(queueEngine);  // create a Queue Panel (view) and send it the engine it is "modeling"
		
		stackButtonPanel = new JPanel();		  // used to hold all stack operation buttons
		stackButtonPanel.setLayout(new GridLayout(1,6));  // 1 row of 6 (change as more or less buttons are used)
		stackButtonPanel.add(pushButton);			// now add buttons to the panel
		stackButtonPanel.add(popButton);
		stackButtonPanel.add(showStackButton);
		stackButtonPanel.add(emptyButton);//
		stackButtonPanel.add(fullButton);//
		stackButtonPanel.add(stackSizeButton);//
		stackButtonPanel.add(clearStackButton);
		stackButtonPanel.add(peekButton);
		
		queueButtonPanel = new JPanel();			// used to hold all queue operation buttons - currently 3 but more should be added
		queueButtonPanel.setLayout(new GridLayout(1,8));
		queueButtonPanel.add(addButton);
		queueButtonPanel.add(removeButton);
		queueButtonPanel.add(showQueueButton);
		queueButtonPanel.add(frontButton);//
		queueButtonPanel.add(queueSizeButton);
		queueButtonPanel.add(clearQueueButton);
		queueButtonPanel.add(rearButton);
		
	
		this.add(stackButtonPanel, BorderLayout.NORTH);  // this is the controller panel, add the stack button panel to the top across
		this.add(queuePanel,  BorderLayout.EAST);		  // add remaining components to this controller panel
		this.add(stackPanel, BorderLayout.WEST);
		this.add(stackArea, BorderLayout.CENTER);
		this.add(queueButtonPanel,  BorderLayout.SOUTH);  // add queue button panel to the bottom

		pushButton.addActionListener(this); 
		popButton.addActionListener(this);
		showStackButton.addActionListener(this);
		showQueueButton.addActionListener(this);
		addButton.addActionListener(this);
		removeButton.addActionListener(this);
		emptyButton.addActionListener(this);//
		fullButton.addActionListener(this);//
		stackSizeButton.addActionListener(this);//
		frontButton.addActionListener(this);//
		clearStackButton.addActionListener(this);
		queueSizeButton.addActionListener(this);
		clearQueueButton.addActionListener(this);
		rearButton.addActionListener(this);
		peekButton.addActionListener(this);
		
		}
	//method called when an ChangeEvent is fired in the model
	// updates data on the view which will reflect any changes made to the model
	private void update() 
	{
		//this.area.setText("Stack Update:\n" + this.engine.getActionText());
		repaint();
		stackArea.setText(stackEngine.getActionText() + "\n\n\n" + queueEngine.getActionText());
	}

	// HANDLES all button actions, listeners for each button
	public void actionPerformed(ActionEvent e) {
		String actionText="";
		if(e.getSource().equals(pushButton))
		{  System.out.println("push button clicked...");
			if(!(stackEngine.getSize() == stackEngine.getMaxSize()))
			{
				String item = JOptionPane.showInputDialog(this, "Enter value to push", "");
				if(item==null)
					actionText="Push cancelled...no push";
				else
				{
				  stackEngine.push(item);
				  actionText = "Just pushed " + item + " onto stack \n" + stackEngine.toString();
				}
			}
			else
			{

				actionText = "Cannot push, the stack is full with these elements:\n"+ stackEngine.toString();
			}
		}
		else if (e.getSource().equals(popButton))
		{
			if(stackEngine.getSize() == 0)
			{
				actionText = "Cannot pop an empty stack";
			}
			else
			{
				stackEngine.pop();  // note we popped the engine and it recovers the value popped
				actionText = stackEngine.getActionText() + "\nContents of Stack: \n" + stackEngine.toString();
			}
		}
		else if (e.getSource().equals(showStackButton))
		{
			actionText = (stackEngine.toString());
			
		}
		else if (e.getSource().equals(addButton))
		{
			String item = JOptionPane.showInputDialog(this, "Enter value to add to queue:", "");
			if(item==null)
				actionText="Add  cancelled...no add occurs";
			else
			{
			  queueEngine.add(item);
			  actionText = queueEngine.getActionText() + " \n" + "Contents of queue: \n"  + queueEngine.toString();
			}
		}
		else if (e.getSource().equals(removeButton))
		{
			
				queueEngine.remove();  // note we remove
				actionText = queueEngine.getActionText() + " \n" +  "Contents of queue: \n" + queueEngine.toString();
		}
		else if (e.getSource().equals(showQueueButton))
		{
			actionText = "\n" + queueEngine.toString();
		}
		
		else if (e.getSource().equals(emptyButton))
		{
			stackEngine.testEmpty();
			queueEngine.testEmpty();
			
			actionText = stackEngine.getActionText() + queueEngine.getActionText();
		}
		
		else if (e.getSource().equals(fullButton))
		{
			stackEngine.testFull();
			queueEngine.testFull();
			
			actionText = stackEngine.getActionText() + queueEngine.getActionText();
		}
		else if (e.getSource().equals(frontButton))
		{
			if(queueEngine.getSize() == 0)
				actionText = "Queue is empty and has no front.";
			else
			{
				queueEngine.showFront();
				actionText = queueEngine.getActionText();
				
			}
			
		}
		
		else if (e.getSource().equals(stackSizeButton))
		{
			stackEngine.getSize();
			actionText = stackEngine.getActionText();
		}
		
		else if (e.getSource().equals(clearStackButton))
		{
			stackEngine.clear();
			actionText = stackEngine.getActionText();
		}
		
		else if (e.getSource().equals(peekButton))
		{
			stackEngine.peek();
			actionText = stackEngine.getActionText();
		}
		
		else if (e.getSource().equals(rearButton))
		{
			queueEngine.showRear();
			actionText = queueEngine.getActionText();
		}
		
		else if (e.getSource().equals(queueSizeButton))
		{
			queueEngine.showSize();
			actionText = queueEngine.getActionText();
		}
		
		else if (e.getSource().equals(clearQueueButton))
		{
			queueEngine.clear();
			actionText = queueEngine.getActionText();
		}
		
		
		
		stackArea.setText(actionText);
	}


}//end of the StackQueueViewImpl class

//StackEngineImpl Class
package asg6;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.EventListenerList;

public class StackEngineImpl implements StackEngine 
{
	private StackList<String> stack; // one of 2 stacks used in this engine
	private String actionText;
	private EventListenerList eventListenerList;  // stores one or more event listener
	private final ChangeEvent CHANGE_EVENT = new ChangeEvent(this);
	
	// default constructor, builds the stack with default max size of 4
	public StackEngineImpl()
	{
		stack = new StackListImpl<String>(StackEngine.DEFAULT_MAX_SIZE);
		this.eventListenerList = new EventListenerList();
		actionText = "Just constructed a Stack default size (4)";
	}
	public StackEngineImpl(int aMax)
	{
		stack = new StackListImpl<String>(aMax);
		this.eventListenerList = new EventListenerList();
		actionText = "Just constructed a Stack with max size of " + aMax;
	}
	//the expected method for any class, returns a string of
	// the current stack contents 
	public String toString()
	{
		String temp = "";
			temp = stack.toString();
			this.actionText = "Current Stack: \n" + temp + "\n";
		return temp;
	}
	
	public String getActionText()
	{
		return this.actionText;
	}
	
	//pre: stack being pushed is not full
	// post: stack has contents of element on the top
	//       actionText contains information about results.
	public void push(String element) {
	if(stack.isFull())
		this.actionText = "Cannot push, stack is full.";
	else
		{
		  stack.push(element);
		  this.actionText = "PUSH " + element + "\n" + 
				  			"Contents of Stack: \n" + stack.toString();
		}
		this.fireChangeEvent(CHANGE_EVENT);
	}
	//pre: stack is not empty
	// post: returns top element on current stack
	//       actionText contains information about results.
	public  void peek() 
	{
		String temp = stack.peek();
		this.actionText = temp + " is on top of the stack.";
		
	}
	//pre: stack is not empty
	// post: returns AND REMOVES top element on current stack
	//       actionText contains information about results.
	public void pop() {
		String retValue = "";
		if(stack.isEmpty())
		{
			this.actionText = "attempt to pop an empty stack..NOT allowed";

		}
		else
		{	
		retValue = stack.pop();
		this.actionText = "Just popped: " + retValue;
		}
		this.fireChangeEvent(CHANGE_EVENT);
	}
	//pre: none
	// post: number of elements on stack is returned
	public int getSize() {
		int retValue=stack.getSize();
		actionText = "Current size of stack: " + retValue;
		return retValue;
	}
	//pre: none
		// post: returns max size for current stack 
		public int getMaxSize()
		{
			int retValue=stack.getMaxSize();
			actionText = "Current size of stack: " + retValue;
			return retValue;
		}
	//pre: none
	// post: returns true iff the current stack has a size of 0.
	public void testEmpty() {
		
		String msg = "";
		if(stack.isEmpty()) 
			msg="empty";
		else
			msg = "NOT empty";
		actionText = "Current stack is " + msg + "\n" ;
	}
	//pre: none
	// post: returns true if the stack currently has MAX_ELEMENTS on it.
	public void testFull() 
	{
		String msg = "";
		if(stack.isFull()) 
			msg="full";
		else
			msg = "NOT full";
		actionText = "Current stack is " + msg + "\n" ;

	}
	// pre: none
	// post: current stack is empty, size is 0.
	public void clear()
	{
		stack.clear();
		this.actionText = "Stack has been cleared.";
		this.fireChangeEvent(CHANGE_EVENT);
				
	}
	//standard boilerplate method for change events
	public void addChangeListener(ChangeListener changeListener)
	{
		eventListenerList.add(ChangeListener.class, changeListener);
	}
	//standard boilerplate method for change events
	public void removeChangeListener(ChangeListener changeListener)
	{
		eventListenerList.remove(ChangeListener.class, changeListener);
	}
	//standard boilerplate method for change events
	// used when we need to notify the view that a change to the model has taken place
	// so that the view can update itself.
	public void fireChangeEvent(ChangeEvent changeEvent) {
		// Guaranteed to return a non-null array
		Object[] listeners = eventListenerList.getListenerList();
		// Process the listeners last to first, notifying
		// those that are interested in this event
		for (int i = listeners.length-2; i>=0; i-=2) {
			if (listeners[i]==ChangeListener.class) {
				((ChangeListener)listeners[i+1]).stateChanged(changeEvent);
			}
		}
	}


}//end of the StackEngineImpl Class

//QueueEngineImpl Class
package asg6;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.EventListenerList;

public class QueueEngineImpl implements QueueEngine
{
	private QueueList <String> queue;
	private String actionText;
	private EventListenerList eventListenerList;
	private final ChangeEvent CHANGE_EVENT = new ChangeEvent(this);

	//default constructor that sets the maxSize of the model queue to DEFAULT_MAX_SIZE from interface
	public QueueEngineImpl()
	{
		this.queue = new QueueListImpl<String>(QueueEngine.DEFAULT_MAX_SIZE);
		this.actionText = "New Queue created - currently empty, max size = 4";
		this.eventListenerList = new EventListenerList();  // create the listener list so we can add listeners to the model
	}
	// constructor that receives a maxSize for the queue model
	public QueueEngineImpl(int maxSize)
	{
		this.queue = new QueueListImpl<String>(maxSize);
		this.actionText = "New Queue created - currently empty, max size = " + maxSize;
		this.eventListenerList = new EventListenerList();  // create the listener list so we can add listeners to the model
	}
	
	//as expected, override of toString() so that we can see the current engine's status
	public String toString()
	{
		String temp = this.queue.toString();
		actionText = "Current contents of queue\n" + temp + "\n";
		return temp;
	}

	//pre: none
	// post: current queue has 1 or more element on it if it is not full
	//       if current stack is full, no changes made, sets actionText appropriately
	public void add(String element)
	{
		if(queue.isFull())
			this.actionText = "Cannot add -- queue is full.";
		else
		{
			queue.add(element);
			this.actionText = "ADD " + element + "to Queue\n";
		}
		this.fireChangeEvent(CHANGE_EVENT);

	}
	@Override
	public void remove() 
	{
		if(queue.isEmpty())
			this.actionText = "Cannot remove -- queue is empty.";
		else
		{
			String res = queue.remove();
			this.actionText = "REMOVED: " + res + " from queue\n";
		}
		this.fireChangeEvent(CHANGE_EVENT);
	}

	// pre: none
	// post:  current Queue is popped and value returned, if stack is empty no pop occurs and actionText states that
	//        otherwise actionText contains result of pop and current stack contents
	public void showFront()
	{
		String temp = queue.getFront();
		
		this.actionText = temp + " is at the front of the queue.\n";

	}
	//pre: none
	// post: returns size of current stack 
	public void showSize()
	{
		String temp = "" + this.getSize();
		actionText = temp;


	}
	//pre: none
	// post: returns max size for current stack 
	public int getSize()
	{
		return queue.getSize();
	}
	//pre: none
	// post: returns max size for current stack 
	public int getMaxSize()
	{
		return queue.getMaxSize();
	}
	//pre: none
	// post: returns max size for current stack 
	public void showMaxSize()
	{
		int retValue=queue.getMaxSize();
		actionText = "Current size of Queue: " + retValue;

	}
	// pre: none
	// post:  front (or first) item in Queue returned, if queue is empty actionText states that
	//        otherwise actionText contains result of peek and current stack contents
	public void showRear() 
	{
		String temp = queue.getRear();
		actionText = temp + " is at the rear of the queue.";
	}
	//pre:  none
	//post: returns true if the current stack is empty false if its not.
	public void  testEmpty()
	{
		String msg = "";
		if(queue.isEmpty()) 
			msg="empty";
		else
			msg = "NOT empty";
		actionText = "Current queue is " + msg + "\n" ;

	}
	//pre:  none
	//post: returns true if the current stack is full false if its not.
	public void testFull()
	{
		String msg = "";
		if(queue.isFull()) 
			msg="full";
		else
			msg = "NOT full";
		actionText = "Current queue is " + msg + "\n" ;

	}
	// pre: none
	// post: current stack is empty
	public void clear()
	{
		queue.clear();
		this.actionText = "Queue has been cleared.";
		this.fireChangeEvent(CHANGE_EVENT);
		
	}

	public String getActionText()
	{
		return this.actionText;
	}

	//standard boilerplate method for change events
	public void addChangeListener(ChangeListener changeListener)
	{
		eventListenerList.add(ChangeListener.class, changeListener);
	}
	//standard boilerplate method for change events
	public void removeChangeListener(ChangeListener changeListener)
	{
		eventListenerList.remove(ChangeListener.class, changeListener);
	}
	//standard boilerplate method for change events
	// used when we need to notify the view that a change to the model has taken place
	// so that the view can update itself.
	public void fireChangeEvent(ChangeEvent changeEvent) {
		// Guaranteed to return a non-null array
		Object[] listeners = eventListenerList.getListenerList();
		// Process the listeners last to first, notifying
		// those that are interested in this event
		for (int i = listeners.length-2; i>=0; i-=2) 
		{
			if (listeners[i]==ChangeListener.class) 
			{
				((ChangeListener)listeners[i+1]).stateChanged(changeEvent);
			}
		}

	}


}//end of the QueueEngineImpl Class

//QueueListImpl Class
package asg6;
import java.util.*;

public class QueueListImpl<T> implements QueueList<T>
{
	private int maxSize;
	private ArrayList<T> queue;
	
	public QueueListImpl()
	{
		this.maxSize = QueueList.DEFAULT_MAX_SIZE;
		queue = new ArrayList<T>(maxSize);
		
	}//end of the default constructor
	
	public QueueListImpl(int theMaxSize)
	{
		if(theMaxSize <= 0)
			this.maxSize = QueueList.DEFAULT_MAX_SIZE;
		else
			this.maxSize = theMaxSize;
		
		queue = new ArrayList<T>(maxSize);
		
	}//end of the parameter constructor
	
	public String toString()
	{
		String temp = "";
		
		for(int index = 0; index < this.queue.size(); index++)
			temp += this.queue.get(index) + "\n";
		
		return temp;
		
	}//end of the toString method

	/** pre: none, tests to see if this QueueList has 0 elements
	 *  post: return true if this QueueList is empty (has 0 elements) false otherwise;
	 */
	public boolean isEmpty() 
	{
		if(this.queue.size() == 0)
			return true;
		
		return false;
		
	}//end of the isEmpty method

	/**pre: none, tests to see if this QueueList is full, 
    full is true if current number of elements in the queue has reached its max allowable size. 
	post: returns true if getSize() has reached getMaxSize(), false if not
	 */  
	public boolean isFull() 
	{
		if(this.queue.size() == this.maxSize)
			return true;
		
		return false;
		
	}//end of the isFull method

	/** pre: none
	 * post: returns  number of elements in this QueueList
	 */
	public int getSize() 
	{
		return this.queue.size();
		
	}//end of the getSize method

	/** pre: none
	 * post: returns max number of elements allowed in this QueueList
	 */
	public int getMaxSize() 
	{
		return this.maxSize;
		
	}//end of the getMaxSize method

	/**
	 *pre: none
	 *post: element is placed at the REAR or END of this QueueList if it is NOT full
	        if this QueueList is full, throws RuntimeException.
	 */
	public void add(T element) 
	{
		if(this.isFull())
			throw new RuntimeException("Attempting to add to a full queue.");
		
		this.queue.add(element);
		
	}//end of the add method

	/** pre: none
	   post: removes and returns the FRONT item from this QueueList if it is NOT empty
	 * @throws - RuntimeException if attempt to remove from an empty QueueList
	 * @return - the object that was removed from the front of this QueueList
	 */
	public T remove() 
	{
		if(this.isEmpty())
			throw new RuntimeException("Attmepting to remove from an empty queue.");
		
		T temp = this.queue.remove(0);
		
		return temp;
		
	}//end of the remove method

	/** pre: none
	  *post: returns the FRONT item from this QueueList if it is
	 * not empty.  DOES NOT REMOVE IT.
	 * @throws - RuntimeException if this QueueList is empty.
	 * @return - object that is currently at the FRONT of this QueueList
	 */
	public T getFront() 
	{
		if(this.isEmpty())
			throw new RuntimeException("Attmepting to access an empty queue.");
		
		return this.queue.get(0);
		
	}//end of the getFront method

	/** pre: none
	  *post: returns the REAR (or last)  item from this QueueList if it is
	 * not empty.  DOES NOT REMOVE IT.
	 * @throws - RuntimeException if this QueueList is empty.
	 * @return - object that is currently at the REAR (or end) of this QueueList
	 */
	public T getRear() 
	{
		if(this.isEmpty())
			throw new RuntimeException("Attmepting to access an empty queue.");
		
		return this.queue.get(this.queue.size() - 1);
		
	}//end of the getRear method

	/** pre: none
    post: removes all items from this QueueList making it empty.
	 */
	public void clear() 
	{
		this.queue.clear();
		
	}//end of the clear method
	
	

}//end of the QueueListImpl class

//StackListImpl Class
package asg6;
import java.util.*;

public class StackListImpl<T> implements StackList<T> 
{
	private int maxSize;
	private ArrayList<T> stack;

	public StackListImpl()
	{
		this.maxSize = StackList.DEFAULT_MAX_SIZE;
		stack = new ArrayList<T>(maxSize);
		
	}//end of the default constructor
	
	public StackListImpl(int theMaxSize)
	{
		if(theMaxSize <= 0)
			this.maxSize = StackList.DEFAULT_MAX_SIZE;
		else
			this.maxSize = theMaxSize;
		
		stack = new ArrayList<T>(maxSize);
		
	}//end of the default constructor
	
	public String toString()
	{
		String temp = "";
		
		for(int index = this.getSize() - 1; index >= 0; index-- )
			temp += this.stack.get(index) + "\n";
		
		return temp;
			
	}//end of the toString method
	
	/** pre: none, tests to see if the Stack has 0 elements
	 *  post: return true if this StackList is empty (has 0 elements) false otherwise;
	 */
	public boolean isEmpty() 
	{
		if(this.stack.size() == 0)
			return true;
			
		return false;
		
	}//end of the isEmpty method

	/**pre: none
	   post: returns true if current number of elements on this StackList has reached getMaxSize().
	 */
	public boolean isFull() 
	{
		if(this.stack.size() == this.maxSize)
			return true;
		
		return false;
		
	}//end of the is full method

	/** pre: none
	 * post: returns  number of elements on this StackList (always <= to getMaxSize())
	 */
	public int getSize() 
	{
		return this.stack.size();
		
	}//end of the getSize method

	// pre: none
	 //post: returns max number of elements allowed on this StackList
	public int getMaxSize() 
	{
		
		return this.maxSize;
		
	}//end of the getMaxSize method

	/** places item on the top of this StackList
	 *pre: none
	 *post: received element is on top of this StackList instance if it is not full
	        if this StackList instance  is full, throws RuntimeException.
	 */
	public void push(T element) 
	{
		if(this.isFull())
			throw new RuntimeException("This is a full list.");
		
		this.stack.add(element);
		
		
	}//end of the push method

	/** pre: none
	   post: removes and returns the top item from this StackList if  it is NOT empty. 
	 * @throws - RuntimeException if attempt to pop an empty StackList
	 * @return - the object that was popped from the top of this StackList
	 */
	public T pop() 
	{
		if(this.isEmpty())
			throw new RuntimeException("This is an empty list.");
		
		T temp = this.stack.get(this.stack.size() - 1);
		
		this.stack.remove(this.stack.size() - 1);
		
		return temp;
		
	}//end of the pop method

	/** pre: none
	  *returns the top item from this StackList  if it is
	 * not empty.  DOES NOT POP IT.
	 * @throws - RuntimeException if attempt to peek at an empty StackList instance
	 * @return - object that is currently on the top of this StackList
	 */
	public T peek() 
	{
		if(this.isEmpty())
			throw new RuntimeException("This is an empty list.");
		
		T temp = this.stack.get(this.stack.size() - 1);
		
		return temp;
		
	}//end of the peak method

	/** pre: none
    post: removes all items from this StackList, making it empty.
	 */
	public void clear() 
	{
		this.stack.clear();
		
	}//end of the clear method

	
	

}//end of the StackListImpl Class
